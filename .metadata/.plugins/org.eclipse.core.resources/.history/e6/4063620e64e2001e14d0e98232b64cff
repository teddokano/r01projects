/*
 * Copyright 2024 Tedd OKANO
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

#include	"PCA9957.h"
PCA9957::PCA9957( SPI &spi ) : _spi( spi )
{
	DigitalOut	rst( D8, 1 );
	DigitalOut	oe(  D9, 0 );

	reg( MODE2,   0x18 );
	reg( IREFALL, 0x10 );
	for ( int i = 0; i < 6; i++ )
		reg( i + LEDOUT0, 0xAA );
}
PCA9957::~PCA9957() {}

void PCA9957::reg( uint8_t reg_addr, uint8_t value )
{
	uint8_t	w_data[ 2 ];

	w_data[ 0 ]	= reg_addr << 1;
	w_data[ 1 ]	= value;

	_spi.write( w_data, NULL, sizeof( w_data ) );
}

uint8_t PCA9957::reg( uint8_t reg_addr )
{
	uint8_t	w_data[ 2 ];
	uint8_t	r_data[ 2 ]	= { 0xFF, 0xFF };

	w_data[ 0 ]	= (reg_addr << 1) | 0x01;
	w_data[ 1 ]	= 0xFF;

	_spi.write( w_data, NULL,   sizeof( w_data ) );
	_spi.write( r_data, r_data, sizeof( w_data ) );

	return r_data[ 1 ];
}

void PCA9957::pwm( uint8_t channel, uint8_t value )
{
	reg( channel + PWM0, value );
}

void PCA9957::dump( void )
{
	constexpr int	cols	= 5;
	int				n		= (PCA9957::N_REG + cols) / cols;
	int				i;
	
	for ( int r = 0; r < n; r++ )
	{
		for ( int c = 0; c < cols; c++ )
		{
			i	= r + c * n;
			
			if ( PCA9957::N_REG < i )
				break;
			
			PRINTF( "  0x%02X: 0x%02X", i, reg( i ) );
		}
		PRINTF( "\r\n" );
	}
}
