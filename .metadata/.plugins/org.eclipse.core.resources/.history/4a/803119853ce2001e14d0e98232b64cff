/*
 * Copyright 2024 Tedd OKANO
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

#include	"r01lib.h"
r01lib_start;	/* *** place this word before making instance of r01lib classes *** */

#define	TEST
#ifndef	TEST
SPI	spi( 1000000, 0 );	//	SCK frequency, mode
#else

extern "C"
{
#include "fsl_device_registers.h"
#include "fsl_debug_console.h"
#include "fsl_lpspi.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "board.h"
}
#define EXAMPLE_LPSPI_MASTER_BASEADDR         (LPSPI1)
#define EXAMPLE_LPSPI_MASTER_IRQN             (LPSPI1_IRQn)
#define EXAMPLE_LPSPI_DEALY_COUNT             0xFFFFF
#define LPSPI_MASTER_CLK_FREQ                 (CLOCK_GetLpspiClkFreq(1))
#define EXAMPLE_LPSPI_MASTER_PCS_FOR_INIT     (kLPSPI_Pcs1)
#define EXAMPLE_LPSPI_MASTER_PCS_FOR_TRANSFER (kLPSPI_MasterPcs1)
#define EXAMPLE_LPSPI_MASTER_IRQHandler       (LPSPI1_IRQHandler)
#define TRANSFER_SIZE     64U     /*! Transfer dataSize */
#define TRANSFER_BAUDRATE 500000U /*! Transfer baudrate - 500k */

void spi_init( uint32_t frequency, uint8_t mode )
{
	lpspi_master_config_t masterConfig;

	LPSPI_MasterGetDefaultConfig(&masterConfig);
	masterConfig.baudRate = frequency;
	masterConfig.whichPcs = EXAMPLE_LPSPI_MASTER_PCS_FOR_INIT;
	masterConfig.pcsToSckDelayInNanoSec        = 1000000000U / (masterConfig.baudRate * 2U);
	masterConfig.lastSckToPcsDelayInNanoSec    = 1000000000U / (masterConfig.baudRate * 2U);
	masterConfig.betweenTransferDelayInNanoSec = 1000000000U / (masterConfig.baudRate * 2U);

	masterConfig.cpol	= (lpspi_clock_polarity_t)((mode >> 0) & 0x1);
	masterConfig.cpha	= (lpspi_clock_phase_t   )((mode >> 1) & 0x1);

	LPSPI_MasterInit(EXAMPLE_LPSPI_MASTER_BASEADDR, &masterConfig, LPSPI_MASTER_CLK_FREQ);
}

status_t spi_write( uint8_t *wp, uint8_t *rp, int length )
{
	lpspi_transfer_t	masterXfer;

	masterXfer.txData		= wp;
	masterXfer.rxData		= rp;
	masterXfer.dataSize		= length;
	masterXfer.configFlags	= EXAMPLE_LPSPI_MASTER_PCS_FOR_TRANSFER | kLPSPI_MasterPcsContinuous | kLPSPI_MasterByteSwap;

	return LPSPI_MasterTransferBlocking( EXAMPLE_LPSPI_MASTER_BASEADDR, &masterXfer );
}

#endif

class PCA9957 : public SPI
{
public:
	enum	{
		MODE1	= 0x00,
		MODE2,
		LEDOUT0	= 0x08,
		PWM0	= 0x10,
		PWMALL	= 0x6A,
		IREFALL
	};

	PCA9957( SPI &spi ) : _spi( spi )
	{
		reg( MODE2,   0x18 );
		reg( IREFALL, 0x10 );
		for ( int i = 0; i < 6; i++ )
			reg( i + LEDOUT0, 0xAA );
	}
	~PCA9957() {}

	void reg( uint8_t reg_addr, uint8_t value )
	{
		uint8_t	w_data[ 2 ];

		w_data[ 0 ]	= reg_addr << 1;
		w_data[ 1 ]	= value;

		_spi.write( w_data, NULL, sizeof( w_data ) );
	}

	uint8_t reg( uint8_t reg_addr )
	{
		uint8_t	w_data[ 2 ];
		uint8_t	r_data[ 2 ];

		w_data[ 0 ]	= (reg_addr << 1) | 0x01;
		w_data[ 1 ]	= 0xFF;

		_spi.write( w_data, r_data, sizeof( w_data ) );

		return r_data[ 1 ];
	}

	void pwm( uint8_t channel, uint8_t value )
	{
		reg( channel + PWM0, value );
	}

private:
	SPI		&_spi;
};

//PCA9957		ledd( spi );
//DigitalOut	oe(   D8  );
//DigitalOut	rst(  D9  );

int oe, rst;

int main(void)
{

    /* Attach peripheral clock */
    CLOCK_SetClockDiv(kCLOCK_DivLPSPI1, 1u);
    CLOCK_AttachClk(kFRO12M_to_LPSPI1);

    BOARD_InitPins();
    BOARD_InitBootClocks();
//    BOARD_InitDebugConsole();

#if 1
	uint8_t	w_data[]	= { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
	uint8_t	r_data[]	= { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
#endif

	rst	= 1;
	oe	= 0;

	while ( true )
	{
		spi_write( w_data, r_data, sizeof( w_data ) );
#if 0
		for ( int i = 0; i < 256; i++ )
		{
			ledd.pwm( 0, i );
			wait( 0.01 );
		}
#endif
	}
}
