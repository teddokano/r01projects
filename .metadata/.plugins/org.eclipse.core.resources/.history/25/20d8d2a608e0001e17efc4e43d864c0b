/*
 * Copyright 2017 NXP
 * Copyright 2024 Tedd OKANO
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*  Standard C Included Files */

extern "C" {
#include "fsl_port.h"
#include "fsl_gpio.h"
#include "fsl_common.h"
#include "pin_mux.h"
#include "board.h"
#include "fsl_debug_console.h"

#include	"irq.h"
}

#include	"io.h"
#include	"InterruptIn.h"

void irq_handler( int num );

static	GPIO_Type	*gpio_ptr[]	= GPIO_BASE_PTRS;



void irq_handler( int num )
{
#if (defined(FSL_FEATURE_PORT_HAS_NO_INTERRUPT) && FSL_FEATURE_PORT_HAS_NO_INTERRUPT)
	/* Clear external interrupt flag. */
	GPIO_GpioClearInterruptFlags( gpio_ptr[ num ], 1U << 29);
#else
	/* Clear external interrupt flag. */
	GPIO_GpioClearInterruptFlags( gpio_ptr[ num ], 1U << 29);
#endif
}


InterruptIn::InterruptIn( uint8_t pin_num )
	: DigitalIn( pin_num )
{
}

InterruptIn::~InterruptIn() {}

void InterruptIn::fall( utick_callback_t callback )
{
	static	IRQn_Type	irqs[]	= GPIO_IRQS;
	
	/* Init input switch GPIO. */
	#if (defined(FSL_FEATURE_PORT_HAS_NO_INTERRUPT) && FSL_FEATURE_PORT_HAS_NO_INTERRUPT)
		GPIO_SetPinInterruptConfig( gpio_n, gpio_pin, kGPIO_InterruptFallingEdge );
	#else
		PORT_SetPinInterruptConfig( gpio_n, gpio_pin, kGPIO_InterruptFallingEdge );
	#endif
#if 1
	for ( int i = 0; i < sizeof( irqs ) / sizeof( IRQn_Type ); i++ )
	{
		PRINTF( "IRQ ? %d\r\n", i );
		if ( gpio_ptr[i] == gpio_n )
		{
			PRINTF( "IRQ = %d\r\n", i );
			
			EnableIRQ( irqs[ i ] );
			break;
		}
	}
#endif
}
